(in-package :s-serialization)

(defun print-symbol-xml (symbol stream)
  (let ((package (symbol-package symbol))
        (name (prin1-to-string symbol)))
    (cond ((eq package +cl-package+) (write-string "CL:" stream))
          ((eq package +keyword-package+) (write-char #\: stream))
          (package (s-xml:print-string-xml (package-name package) stream)
                   (write-string "::" stream))
          (t (write-string "#:" stream)))
    (if (char= (char name (1- (length name))) #\|)
        (s-xml:print-string-xml name stream :start (position #\| name))
        (s-xml:print-string-xml name stream :start (1+ (or (position #\: name :from-end t) -1))))))

(defun get-attribute-value (name attributes)
  (cdr (assoc name attributes :test #'eq)))
